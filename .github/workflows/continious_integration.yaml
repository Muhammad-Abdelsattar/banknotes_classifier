on:
  push:
    branches:
      - "*"

jobs:
  CI:
    runs-on: self-hosted
    env:
      PYTHON_VERSION: '3.10.12'
      # TAG_PREFIX: 'banknotes_classifier@v'

    steps:
      # Step 1: Checkout code with full history and tags
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.PAT }}

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Step 3: Install dependencies
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Configure DVC for Google Drive remote
      - name: Configure DVC
        run: |
          echo "${{ secrets.GDRIVE_CREDENTIALS_DATA }}" > creds.json
          dvc remote add -d -f myremote gdrive://1IdooJif1hoyvpqVNU8zjniOqhMus1Js4
          dvc remote modify myremote gdrive_use_service_account true
          dvc remote modify myremote gdrive_acknowledge_abuse true
          dvc remote modify myremote --local gdrive_service_account_json_file_path creds.json

      # Step 5: Run evaluation script and pull necessary data from DVC
      - name: Run Evaluation
        run: |
          dvc pull artifacts/model.onnx
          dvc pull input/test_dataset.zip
          unzip -o input/test_dataset.zip -d input/test_dataset
          python -m steps.evaluate

      # Step 6: Generate and push a new tag if metrics improved
      - name: Generate and Push New Tag
        run: |
          # Run metrics diff check
          dvc metrics diff --targets reports/evaluation.json --all --json --no-path -- master > diff.json
          python .github/workflows/helpers/check.py
          
          # Determine if the metric is "greater" (indicating improvement)
          if [[ $(< diff.txt) == "greater" ]]; then
            # Get the latest tag and increment the version
            latest_tag=$(git tag --sort=-v:refname | grep '^banknotes_classifier@' | head -n 1)
            latest_version=$(echo "$latest_tag" | grep -oE '[0-9]+$')
            new_version=$((latest_version + 1))
            new_tag="banknotes_classifier@v${new_version}"
            
            # Tag and push the new version
            git config user.name "GitHub Actions"
            git config user.email "github-actions@users.noreply.github.com"
            git tag "$new_tag"
            git push origin "$new_tag"
            
            echo "New tag pushed: $new_tag"
          else
            echo "No improvement in metrics. No new tag created."
          fi
        shell: bash
