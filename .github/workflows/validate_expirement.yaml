on:
  push:
    branches:
      - "exp/*"

jobs:
  validate_experiment:
    runs-on: self-hosted
    env:
      PYTHON_VERSION: '3.10.12'

    # Step 1: Checkout code with full history and tags
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        token: ${{ secrets.PAT }}

    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install GH CLI
      uses: dev-hanz-ops/install-gh-cli-action@v0.2.0

    # Step 3: Install dependencies
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Configure DVC for Google Drive remote
    - name: Configure DVC
      run: |
        echo '${{ secrets.GDRIVE_CREDENTIALS_DATA }}' > creds.json
        dvc remote add -d -f myremote gdrive://1IdooJif1hoyvpqVNU8zjniOqhMus1Js4
        dvc remote modify myremote gdrive_use_service_account true
        dvc remote modify myremote gdrive_acknowledge_abuse true
        dvc remote modify myremote --local gdrive_service_account_json_file_path creds.json

    # Step 5: Run evaluation script and pull necessary data from DVC
    - name: Run Evaluation
      run: |
        dvc pull artifacts/model.onnx
        dvc pull input/test_dataset.zip
        unzip -o input/test_dataset.zip -d input/test_dataset > /dev/null 2>&1
        python -m steps.evaluate
  
    - name: Compare metrics
      id: compare_metrics
      run: |
        # Run metrics diff check
        dvc metrics diff --targets reports/evaluation/metrics.json --all --json --no-path -- master > diff.json
        python .github/workflows/helpers/check.py
        diff="not acceptable"
        # Determine if the metric is "acceptable" 
        if [[ $(< diff.txt) == "acceptable" ]]; then
          diff="acceptable"
        fi
        echo "diff=$diff" >> "$GITHUB_OUTPUT"
      shell: bash
    
    - name: register experiment
      if: steps.compare_metrics.outputs.diff == 'acceptable' 
      run: |
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        BRANCH_PREFIX=$(echo "$BRANCH_NAME" | cut -d'/' -f1)
        BRANCH_SUFFIX=$(echo "$BRANCH_NAME" | cut -d'/' -f2-)
        LATEST_TAG=$(git tag -l "$BRANCH_SUFFIX"\* | sort -V | tail -n 1)
        if [ -n "$LATEST_TAG" ]; then
          CURRENT_VERSION=$(echo "$LATEST_TAG" | grep -oE '[0-9]+$')
          NEW_VERSION=$((CURRENT_VERSION + 1))
          echo "$NEW_VERSION"
          NEW_TAG="$BRANCH_SUFFIX-v$NEW_VERSION"
        else
          echo "No existing tag found. Starting with 0."
          # If no existing tag, start with 0
          NEW_TAG="$BRANCH_SUFFIX-v0"
        fi
        git tag -a $NEW_TAG -m "New Experiment"
        git push origin $NEW_TAG
        echo "NEW_TAG=$NEW_TAG" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Create Pull Request to dev
      if: steps.compare_metrics.outputs.diff == 'acceptable'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
        head_ref="${GITHUB_REF#refs/heads/}"
        latest_pr_num=$(gh pr list --head $head_ref --base dev --state open --json number -q '.[0].number')
        if [[ -z $latest_pr_num ]]; then
          gh pr create --base dev --head "${GITHUB_REF#refs/heads/}" \
          --title "A promising experiment." \
          --body "This PR was created automatically by the GitHub Actions workflow." 
        else
          gh pr comment $latest_pr_num --body "This PR has been updated with the latest changes."
        fi
        echo "PR_NUM=$latest_pr_num" >> "$GITHUB_OUTPUT"

    - name: Create PR Report
      run: |
        echo "# Experiment Report" >> report.md
        echo "## Metrics: Experiment vs. Production" >> report.md
        dvc metrics diff --no-path --precision 4 --targets reports/evaluation/metrics.json --md --all -- master >> report.md
        echo "## Confusion Matrix of the experiment" >> report.md
        echo '![](reports/evaluation/plots/confusion_matrix.png "Confusion Matrix")' >> report.md
        gh pr comment ${{ steps.create_pr_to_dev.outputs.PR_NUM }} --body "$(cat report.md)"